package com.peihou.waterpurifer.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.peihou.waterpurifer.pojo.Equipment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQUIPMENT".
*/
public class EquipmentDao extends AbstractDao<Equipment, Long> {

    public static final String TABLENAME = "EQUIPMENT";

    /**
     * Properties of entity Equipment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property HaData = new Property(2, boolean.class, "haData", false, "HA_DATA");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property DeviceMac = new Property(4, String.class, "deviceMac", false, "DEVICE_MAC");
        public final static Property DeviceMCU = new Property(5, String.class, "deviceMCU", false, "DEVICE_MCU");
        public final static Property RoleFlag = new Property(6, int.class, "roleFlag", false, "ROLE_FLAG");
        public final static Property DeviceLeaseType = new Property(7, int.class, "deviceLeaseType", false, "DEVICE_LEASE_TYPE");
        public final static Property DevicePayType = new Property(8, int.class, "devicePayType", false, "DEVICE_PAY_TYPE");
        public final static Property DeviceSellerId = new Property(9, int.class, "deviceSellerId", false, "DEVICE_SELLER_ID");
        public final static Property DeviceFlag = new Property(10, int.class, "deviceFlag", false, "DEVICE_FLAG");
        public final static Property DeviceUserId = new Property(11, int.class, "deviceUserId", false, "DEVICE_USER_ID");
        public final static Property WPurifierState = new Property(12, int.class, "wPurifierState", false, "W_PURIFIER_STATE");
        public final static Property Bussinessmodule = new Property(13, int.class, "bussinessmodule", false, "BUSSINESSMODULE");
        public final static Property WPurifierfilter = new Property(14, int.class, "wPurifierfilter", false, "W_PURIFIERFILTER");
        public final static Property WPurifierfilter1 = new Property(15, int.class, "wPurifierfilter1", false, "W_PURIFIERFILTER1");
        public final static Property WPurifierfilter2 = new Property(16, int.class, "wPurifierfilter2", false, "W_PURIFIERFILTER2");
        public final static Property WPurifierfilter3 = new Property(17, int.class, "wPurifierfilter3", false, "W_PURIFIERFILTER3");
        public final static Property WPurifierfilter4 = new Property(18, int.class, "wPurifierfilter4", false, "W_PURIFIERFILTER4");
        public final static Property WPurifierfilter5 = new Property(19, int.class, "wPurifierfilter5", false, "W_PURIFIERFILTER5");
        public final static Property WTrueFlowmeter = new Property(20, String.class, "wTrueFlowmeter", false, "W_TRUE_FLOWMETER");
        public final static Property WPurifierPrimaryQuqlity = new Property(21, String.class, "wPurifierPrimaryQuqlity", false, "W_PURIFIER_PRIMARY_QUQLITY");
        public final static Property FlowmeterWarm = new Property(22, int.class, "FlowmeterWarm", false, "FLOWMETER_WARM");
        public final static Property WPurifierOutQuqlity = new Property(23, int.class, "wPurifierOutQuqlity", false, "W_PURIFIER_OUT_QUQLITY");
        public final static Property WTotalProductionTime = new Property(24, String.class, "wTotalProductionTime", false, "W_TOTAL_PRODUCTION_TIME");
        public final static Property WContinuiProductionTime = new Property(25, int.class, "wContinuiProductionTime", false, "W_CONTINUI_PRODUCTION_TIME");
        public final static Property WWaterStall = new Property(26, int.class, "wWaterStall", false, "W_WATER_STALL");
        public final static Property WMobileSignal = new Property(27, int.class, "wMobileSignal", false, "W_MOBILE_SIGNAL");
        public final static Property IsOpen = new Property(28, int.class, "IsOpen", false, "IS_OPEN");
        public final static Property HavaWater = new Property(29, int.class, "HavaWater", false, "HAVA_WATER");
        public final static Property WaterWash = new Property(30, int.class, "WaterWash", false, "WATER_WASH");
        public final static Property MakeWater = new Property(31, int.class, "MakeWater", false, "MAKE_WATER");
        public final static Property IsFull = new Property(32, int.class, "IsFull", false, "IS_FULL");
        public final static Property Repair = new Property(33, int.class, "Repair", false, "REPAIR");
        public final static Property IsLeakage = new Property(34, int.class, "IsLeakage", false, "IS_LEAKAGE");
        public final static Property Alarming = new Property(35, int.class, "Alarming", false, "ALARMING");
        public final static Property Warming = new Property(36, int.class, "Warming", false, "WARMING");
        public final static Property AlarmState = new Property(37, int.class, "AlarmState", false, "ALARM_STATE");
        public final static Property AlarmIsLeakage = new Property(38, int.class, "AlarmIsLeakage", false, "ALARM_IS_LEAKAGE");
        public final static Property ContinuProduction = new Property(39, int.class, "ContinuProduction", false, "CONTINU_PRODUCTION");
        public final static Property AlarmFlowmeter = new Property(40, int.class, "AlarmFlowmeter", false, "ALARM_FLOWMETER");
        public final static Property AlarmWash = new Property(41, int.class, "AlarmWash", false, "ALARM_WASH");
        public final static Property RechargeTime = new Property(42, String.class, "RechargeTime", false, "RECHARGE_TIME");
        public final static Property RechargeFlow = new Property(43, String.class, "RechargeFlow", false, "RECHARGE_FLOW");
        public final static Property BackwaterInterval = new Property(44, String.class, "BackwaterInterval", false, "BACKWATER_INTERVAL");
        public final static Property BackwashTime = new Property(45, int.class, "BackwashTime", false, "BACKWASH_TIME");
        public final static Property BackwashInterval = new Property(46, String.class, "BackwashInterval", false, "BACKWASH_INTERVAL");
        public final static Property MachineType = new Property(47, int.class, "MachineType", false, "MACHINE_TYPE");
        public final static Property WashTime = new Property(48, int.class, "WashTime", false, "WASH_TIME");
    }


    public EquipmentDao(DaoConfig config) {
        super(config);
    }
    
    public EquipmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQUIPMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"HA_DATA\" INTEGER NOT NULL ," + // 2: haData
                "\"NAME\" TEXT," + // 3: name
                "\"DEVICE_MAC\" TEXT," + // 4: deviceMac
                "\"DEVICE_MCU\" TEXT," + // 5: deviceMCU
                "\"ROLE_FLAG\" INTEGER NOT NULL ," + // 6: roleFlag
                "\"DEVICE_LEASE_TYPE\" INTEGER NOT NULL ," + // 7: deviceLeaseType
                "\"DEVICE_PAY_TYPE\" INTEGER NOT NULL ," + // 8: devicePayType
                "\"DEVICE_SELLER_ID\" INTEGER NOT NULL ," + // 9: deviceSellerId
                "\"DEVICE_FLAG\" INTEGER NOT NULL ," + // 10: deviceFlag
                "\"DEVICE_USER_ID\" INTEGER NOT NULL ," + // 11: deviceUserId
                "\"W_PURIFIER_STATE\" INTEGER NOT NULL ," + // 12: wPurifierState
                "\"BUSSINESSMODULE\" INTEGER NOT NULL ," + // 13: bussinessmodule
                "\"W_PURIFIERFILTER\" INTEGER NOT NULL ," + // 14: wPurifierfilter
                "\"W_PURIFIERFILTER1\" INTEGER NOT NULL ," + // 15: wPurifierfilter1
                "\"W_PURIFIERFILTER2\" INTEGER NOT NULL ," + // 16: wPurifierfilter2
                "\"W_PURIFIERFILTER3\" INTEGER NOT NULL ," + // 17: wPurifierfilter3
                "\"W_PURIFIERFILTER4\" INTEGER NOT NULL ," + // 18: wPurifierfilter4
                "\"W_PURIFIERFILTER5\" INTEGER NOT NULL ," + // 19: wPurifierfilter5
                "\"W_TRUE_FLOWMETER\" TEXT," + // 20: wTrueFlowmeter
                "\"W_PURIFIER_PRIMARY_QUQLITY\" TEXT," + // 21: wPurifierPrimaryQuqlity
                "\"FLOWMETER_WARM\" INTEGER NOT NULL ," + // 22: FlowmeterWarm
                "\"W_PURIFIER_OUT_QUQLITY\" INTEGER NOT NULL ," + // 23: wPurifierOutQuqlity
                "\"W_TOTAL_PRODUCTION_TIME\" TEXT," + // 24: wTotalProductionTime
                "\"W_CONTINUI_PRODUCTION_TIME\" INTEGER NOT NULL ," + // 25: wContinuiProductionTime
                "\"W_WATER_STALL\" INTEGER NOT NULL ," + // 26: wWaterStall
                "\"W_MOBILE_SIGNAL\" INTEGER NOT NULL ," + // 27: wMobileSignal
                "\"IS_OPEN\" INTEGER NOT NULL ," + // 28: IsOpen
                "\"HAVA_WATER\" INTEGER NOT NULL ," + // 29: HavaWater
                "\"WATER_WASH\" INTEGER NOT NULL ," + // 30: WaterWash
                "\"MAKE_WATER\" INTEGER NOT NULL ," + // 31: MakeWater
                "\"IS_FULL\" INTEGER NOT NULL ," + // 32: IsFull
                "\"REPAIR\" INTEGER NOT NULL ," + // 33: Repair
                "\"IS_LEAKAGE\" INTEGER NOT NULL ," + // 34: IsLeakage
                "\"ALARMING\" INTEGER NOT NULL ," + // 35: Alarming
                "\"WARMING\" INTEGER NOT NULL ," + // 36: Warming
                "\"ALARM_STATE\" INTEGER NOT NULL ," + // 37: AlarmState
                "\"ALARM_IS_LEAKAGE\" INTEGER NOT NULL ," + // 38: AlarmIsLeakage
                "\"CONTINU_PRODUCTION\" INTEGER NOT NULL ," + // 39: ContinuProduction
                "\"ALARM_FLOWMETER\" INTEGER NOT NULL ," + // 40: AlarmFlowmeter
                "\"ALARM_WASH\" INTEGER NOT NULL ," + // 41: AlarmWash
                "\"RECHARGE_TIME\" TEXT," + // 42: RechargeTime
                "\"RECHARGE_FLOW\" TEXT," + // 43: RechargeFlow
                "\"BACKWATER_INTERVAL\" TEXT," + // 44: BackwaterInterval
                "\"BACKWASH_TIME\" INTEGER NOT NULL ," + // 45: BackwashTime
                "\"BACKWASH_INTERVAL\" TEXT," + // 46: BackwashInterval
                "\"MACHINE_TYPE\" INTEGER NOT NULL ," + // 47: MachineType
                "\"WASH_TIME\" INTEGER NOT NULL );"); // 48: WashTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQUIPMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Equipment entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getHaData() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(5, deviceMac);
        }
 
        String deviceMCU = entity.getDeviceMCU();
        if (deviceMCU != null) {
            stmt.bindString(6, deviceMCU);
        }
        stmt.bindLong(7, entity.getRoleFlag());
        stmt.bindLong(8, entity.getDeviceLeaseType());
        stmt.bindLong(9, entity.getDevicePayType());
        stmt.bindLong(10, entity.getDeviceSellerId());
        stmt.bindLong(11, entity.getDeviceFlag());
        stmt.bindLong(12, entity.getDeviceUserId());
        stmt.bindLong(13, entity.getWPurifierState());
        stmt.bindLong(14, entity.getBussinessmodule());
        stmt.bindLong(15, entity.getWPurifierfilter());
        stmt.bindLong(16, entity.getWPurifierfilter1());
        stmt.bindLong(17, entity.getWPurifierfilter2());
        stmt.bindLong(18, entity.getWPurifierfilter3());
        stmt.bindLong(19, entity.getWPurifierfilter4());
        stmt.bindLong(20, entity.getWPurifierfilter5());
 
        String wTrueFlowmeter = entity.getWTrueFlowmeter();
        if (wTrueFlowmeter != null) {
            stmt.bindString(21, wTrueFlowmeter);
        }
 
        String wPurifierPrimaryQuqlity = entity.getWPurifierPrimaryQuqlity();
        if (wPurifierPrimaryQuqlity != null) {
            stmt.bindString(22, wPurifierPrimaryQuqlity);
        }
        stmt.bindLong(23, entity.getFlowmeterWarm());
        stmt.bindLong(24, entity.getWPurifierOutQuqlity());
 
        String wTotalProductionTime = entity.getWTotalProductionTime();
        if (wTotalProductionTime != null) {
            stmt.bindString(25, wTotalProductionTime);
        }
        stmt.bindLong(26, entity.getWContinuiProductionTime());
        stmt.bindLong(27, entity.getWWaterStall());
        stmt.bindLong(28, entity.getWMobileSignal());
        stmt.bindLong(29, entity.getIsOpen());
        stmt.bindLong(30, entity.getHavaWater());
        stmt.bindLong(31, entity.getWaterWash());
        stmt.bindLong(32, entity.getMakeWater());
        stmt.bindLong(33, entity.getIsFull());
        stmt.bindLong(34, entity.getRepair());
        stmt.bindLong(35, entity.getIsLeakage());
        stmt.bindLong(36, entity.getAlarming());
        stmt.bindLong(37, entity.getWarming());
        stmt.bindLong(38, entity.getAlarmState());
        stmt.bindLong(39, entity.getAlarmIsLeakage());
        stmt.bindLong(40, entity.getContinuProduction());
        stmt.bindLong(41, entity.getAlarmFlowmeter());
        stmt.bindLong(42, entity.getAlarmWash());
 
        String RechargeTime = entity.getRechargeTime();
        if (RechargeTime != null) {
            stmt.bindString(43, RechargeTime);
        }
 
        String RechargeFlow = entity.getRechargeFlow();
        if (RechargeFlow != null) {
            stmt.bindString(44, RechargeFlow);
        }
 
        String BackwaterInterval = entity.getBackwaterInterval();
        if (BackwaterInterval != null) {
            stmt.bindString(45, BackwaterInterval);
        }
        stmt.bindLong(46, entity.getBackwashTime());
 
        String BackwashInterval = entity.getBackwashInterval();
        if (BackwashInterval != null) {
            stmt.bindString(47, BackwashInterval);
        }
        stmt.bindLong(48, entity.getMachineType());
        stmt.bindLong(49, entity.getWashTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Equipment entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getHaData() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(5, deviceMac);
        }
 
        String deviceMCU = entity.getDeviceMCU();
        if (deviceMCU != null) {
            stmt.bindString(6, deviceMCU);
        }
        stmt.bindLong(7, entity.getRoleFlag());
        stmt.bindLong(8, entity.getDeviceLeaseType());
        stmt.bindLong(9, entity.getDevicePayType());
        stmt.bindLong(10, entity.getDeviceSellerId());
        stmt.bindLong(11, entity.getDeviceFlag());
        stmt.bindLong(12, entity.getDeviceUserId());
        stmt.bindLong(13, entity.getWPurifierState());
        stmt.bindLong(14, entity.getBussinessmodule());
        stmt.bindLong(15, entity.getWPurifierfilter());
        stmt.bindLong(16, entity.getWPurifierfilter1());
        stmt.bindLong(17, entity.getWPurifierfilter2());
        stmt.bindLong(18, entity.getWPurifierfilter3());
        stmt.bindLong(19, entity.getWPurifierfilter4());
        stmt.bindLong(20, entity.getWPurifierfilter5());
 
        String wTrueFlowmeter = entity.getWTrueFlowmeter();
        if (wTrueFlowmeter != null) {
            stmt.bindString(21, wTrueFlowmeter);
        }
 
        String wPurifierPrimaryQuqlity = entity.getWPurifierPrimaryQuqlity();
        if (wPurifierPrimaryQuqlity != null) {
            stmt.bindString(22, wPurifierPrimaryQuqlity);
        }
        stmt.bindLong(23, entity.getFlowmeterWarm());
        stmt.bindLong(24, entity.getWPurifierOutQuqlity());
 
        String wTotalProductionTime = entity.getWTotalProductionTime();
        if (wTotalProductionTime != null) {
            stmt.bindString(25, wTotalProductionTime);
        }
        stmt.bindLong(26, entity.getWContinuiProductionTime());
        stmt.bindLong(27, entity.getWWaterStall());
        stmt.bindLong(28, entity.getWMobileSignal());
        stmt.bindLong(29, entity.getIsOpen());
        stmt.bindLong(30, entity.getHavaWater());
        stmt.bindLong(31, entity.getWaterWash());
        stmt.bindLong(32, entity.getMakeWater());
        stmt.bindLong(33, entity.getIsFull());
        stmt.bindLong(34, entity.getRepair());
        stmt.bindLong(35, entity.getIsLeakage());
        stmt.bindLong(36, entity.getAlarming());
        stmt.bindLong(37, entity.getWarming());
        stmt.bindLong(38, entity.getAlarmState());
        stmt.bindLong(39, entity.getAlarmIsLeakage());
        stmt.bindLong(40, entity.getContinuProduction());
        stmt.bindLong(41, entity.getAlarmFlowmeter());
        stmt.bindLong(42, entity.getAlarmWash());
 
        String RechargeTime = entity.getRechargeTime();
        if (RechargeTime != null) {
            stmt.bindString(43, RechargeTime);
        }
 
        String RechargeFlow = entity.getRechargeFlow();
        if (RechargeFlow != null) {
            stmt.bindString(44, RechargeFlow);
        }
 
        String BackwaterInterval = entity.getBackwaterInterval();
        if (BackwaterInterval != null) {
            stmt.bindString(45, BackwaterInterval);
        }
        stmt.bindLong(46, entity.getBackwashTime());
 
        String BackwashInterval = entity.getBackwashInterval();
        if (BackwashInterval != null) {
            stmt.bindString(47, BackwashInterval);
        }
        stmt.bindLong(48, entity.getMachineType());
        stmt.bindLong(49, entity.getWashTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Equipment readEntity(Cursor cursor, int offset) {
        Equipment entity = new Equipment( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getShort(offset + 2) != 0, // haData
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceMac
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceMCU
            cursor.getInt(offset + 6), // roleFlag
            cursor.getInt(offset + 7), // deviceLeaseType
            cursor.getInt(offset + 8), // devicePayType
            cursor.getInt(offset + 9), // deviceSellerId
            cursor.getInt(offset + 10), // deviceFlag
            cursor.getInt(offset + 11), // deviceUserId
            cursor.getInt(offset + 12), // wPurifierState
            cursor.getInt(offset + 13), // bussinessmodule
            cursor.getInt(offset + 14), // wPurifierfilter
            cursor.getInt(offset + 15), // wPurifierfilter1
            cursor.getInt(offset + 16), // wPurifierfilter2
            cursor.getInt(offset + 17), // wPurifierfilter3
            cursor.getInt(offset + 18), // wPurifierfilter4
            cursor.getInt(offset + 19), // wPurifierfilter5
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // wTrueFlowmeter
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // wPurifierPrimaryQuqlity
            cursor.getInt(offset + 22), // FlowmeterWarm
            cursor.getInt(offset + 23), // wPurifierOutQuqlity
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // wTotalProductionTime
            cursor.getInt(offset + 25), // wContinuiProductionTime
            cursor.getInt(offset + 26), // wWaterStall
            cursor.getInt(offset + 27), // wMobileSignal
            cursor.getInt(offset + 28), // IsOpen
            cursor.getInt(offset + 29), // HavaWater
            cursor.getInt(offset + 30), // WaterWash
            cursor.getInt(offset + 31), // MakeWater
            cursor.getInt(offset + 32), // IsFull
            cursor.getInt(offset + 33), // Repair
            cursor.getInt(offset + 34), // IsLeakage
            cursor.getInt(offset + 35), // Alarming
            cursor.getInt(offset + 36), // Warming
            cursor.getInt(offset + 37), // AlarmState
            cursor.getInt(offset + 38), // AlarmIsLeakage
            cursor.getInt(offset + 39), // ContinuProduction
            cursor.getInt(offset + 40), // AlarmFlowmeter
            cursor.getInt(offset + 41), // AlarmWash
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // RechargeTime
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // RechargeFlow
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // BackwaterInterval
            cursor.getInt(offset + 45), // BackwashTime
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // BackwashInterval
            cursor.getInt(offset + 47), // MachineType
            cursor.getInt(offset + 48) // WashTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Equipment entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setHaData(cursor.getShort(offset + 2) != 0);
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceMac(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceMCU(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRoleFlag(cursor.getInt(offset + 6));
        entity.setDeviceLeaseType(cursor.getInt(offset + 7));
        entity.setDevicePayType(cursor.getInt(offset + 8));
        entity.setDeviceSellerId(cursor.getInt(offset + 9));
        entity.setDeviceFlag(cursor.getInt(offset + 10));
        entity.setDeviceUserId(cursor.getInt(offset + 11));
        entity.setWPurifierState(cursor.getInt(offset + 12));
        entity.setBussinessmodule(cursor.getInt(offset + 13));
        entity.setWPurifierfilter(cursor.getInt(offset + 14));
        entity.setWPurifierfilter1(cursor.getInt(offset + 15));
        entity.setWPurifierfilter2(cursor.getInt(offset + 16));
        entity.setWPurifierfilter3(cursor.getInt(offset + 17));
        entity.setWPurifierfilter4(cursor.getInt(offset + 18));
        entity.setWPurifierfilter5(cursor.getInt(offset + 19));
        entity.setWTrueFlowmeter(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWPurifierPrimaryQuqlity(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFlowmeterWarm(cursor.getInt(offset + 22));
        entity.setWPurifierOutQuqlity(cursor.getInt(offset + 23));
        entity.setWTotalProductionTime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setWContinuiProductionTime(cursor.getInt(offset + 25));
        entity.setWWaterStall(cursor.getInt(offset + 26));
        entity.setWMobileSignal(cursor.getInt(offset + 27));
        entity.setIsOpen(cursor.getInt(offset + 28));
        entity.setHavaWater(cursor.getInt(offset + 29));
        entity.setWaterWash(cursor.getInt(offset + 30));
        entity.setMakeWater(cursor.getInt(offset + 31));
        entity.setIsFull(cursor.getInt(offset + 32));
        entity.setRepair(cursor.getInt(offset + 33));
        entity.setIsLeakage(cursor.getInt(offset + 34));
        entity.setAlarming(cursor.getInt(offset + 35));
        entity.setWarming(cursor.getInt(offset + 36));
        entity.setAlarmState(cursor.getInt(offset + 37));
        entity.setAlarmIsLeakage(cursor.getInt(offset + 38));
        entity.setContinuProduction(cursor.getInt(offset + 39));
        entity.setAlarmFlowmeter(cursor.getInt(offset + 40));
        entity.setAlarmWash(cursor.getInt(offset + 41));
        entity.setRechargeTime(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setRechargeFlow(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setBackwaterInterval(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setBackwashTime(cursor.getInt(offset + 45));
        entity.setBackwashInterval(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setMachineType(cursor.getInt(offset + 47));
        entity.setWashTime(cursor.getInt(offset + 48));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Equipment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Equipment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Equipment entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
